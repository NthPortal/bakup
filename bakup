#!/usr/bin/env bash

name=$(basename "$0")

cmd="mv"
unbak_smart=false
unbak_exact=false
overwrite="-i"
ext=".bak"
slash="/"

opt_e=false

print_usage() {
	echo "Appends the extension '.bak' to a file to back it up"
	echo
	echo "Usage: $name [OPTIONS] [-u|U] [-e|E EXTENSION] TARGET [TARGET...]"
	echo
	echo "   -u       Removes the '.bak' extension from TARGET (unbakup); if TARGET"
	echo "                does not end in '.bak', it will perform the renaming on"
	echo "                TARGET.bak if it exists"
	echo "   -U       Removes the '.bak' extension from TARGET exactly; fails if"
	echo "                TARGET does not end in '.bak'"
	echo "   -f       Do not prompt before overwriting an existing file (force);"
	echo "                overrides -i and -n"
	echo "   -i       Prompt before overwriting a file (interactive) [default];"
	echo "                overrides -f and -n"
	echo "   -n       Do not overwrite an existing file (no clobber);"
	echo "                overrides -f and -i"
	echo "   -c       Copies TARGET instead of moving it"
	echo "   -e EXT   Uses EXT as the extension instead of '.bak'; will prepend a"
	echo "                '.' if EXT does not begin with one"
	echo "   -E EXT   Uses EXT exactly as provided as the extension instead of '.bak'"
	echo "   -h       Prints this help message and exits"
	echo
}


mutually_exclusive_opts() {
	echo "Mutually exclusive options: $*"
}

unable_to_unbak() {
	echo "$name: '$ext' cannot be removed from '$1'"
}

# Params: source, dest
do_op() {
	src="$1"
	dest="$2"
	
	if [ -e "$src" ] ; then
		$cmd $overwrite "$src" "$dest"
	else
		echo "$name: cannot stat ‘$src’: No such file or directory"
	fi
}

# Parse opts
while getopts ":uUfince:E:h" opt; do
	case "$opt" in
		u)
			# Check for mutually exclusive opts
			$unbak_exact && mutually_exclusive_opts "-u|U" && print_usage && exit 1
			
			unbak_smart=true
			;;
		U)
			# Check for mutually exclusive opts
			$unbak_smart && mutually_exclusive_opts "-u|U" && print_usage && exit 1
		
			unbak_exact=true
			;;
		f)
			overwrite="-f"
			;;
		i)
			overwrite="-i"
			;;
		n)
			overwrite="-n"
			;;
		c)
			cmd="cp -r"
			;;
		h)
			print_usage
			exit 0
			;;
		e)
			# Check for mutually duplicate/mutually exclusive 
			$opt_e && print_usage && exit 1
			opt_e=true
			
			if (echo "$OPTARG" | grep -q "^\..*") ; then
				ext="$OPTARG"
			else
				ext=".$OPTARG"
			fi
			;;
		E)
			# Check for duplicate/mutually exclusive opts
			$opt_e && print_usage && exit 1
			opt_e=true
			
			ext="$OPTARG"
			;;
		:)
			echo "-$OPTARG requires an argument."
			echo
			print_usage
			exit 1
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			print_usage
			exit 1
			;;
	esac
done

shift $((OPTIND - 1))

# Check that any targets after parsing opts
if [ $# = 0 ] ; then
	print_usage
	exit 1
fi

# Loop over targets and perform operation on each
for item in "$@"
do
	# Remove slash
	target=${item%"$slash"}
	
	# Unbakup
	if ($unbak_exact || $unbak_smart) ; then
		# Ends with extension
		if echo "$target" | grep -q ".$ext$" ; then
			do_op "$target" "${target%"$ext"}"
		# Smart unbakup
		elif ($unbak_smart) ; then
			if [ -e "$target$ext" ] ; then
				do_op "$target$ext" "$target"
			else
				echo "$name: '$ext' cannot be removed from '$target', and there is no such file or directory '$target$ext'"
			fi
		# Target does not end in extension (and not smart unbakup)
		else
			unable_to_unbak "$target"
		fi
	# Bakup
	else
		do_op "$target" "$target$ext"
	fi
done
