#! /bin/bash

cmd="mv"
unbak=false
force="-i"
ext=".bak"
slash="/"

print_usage() {
	echo "Appends the extension '.bak' to a file to back it up"
	echo
	echo "Usage: $(basename $0) [OPTIONS] [-e|E EXTENSION] TARGET [TARGET...]"
	echo
	echo -e "   -u \t\tRenames TARGET.bak to TARGET (unbakup)"
	echo -e "   -f \t\tOverwrites file if it already exists"
	echo -e "   -c \t\tCopies TARGET instead of moving it"
	echo -e "   -e EXT\tUses EXT as the extension instead of 'bak'"
	echo -e "   -E \t\t-e without prompting for confirmation"
	echo -e "   -h \t\tPrints this help message"
	echo
}

unable_to_unbak() {
	echo "'$ext' cannot be removed from '$1'"
}

while getopts ":ufce:E:h" opt; do

	case "$opt" in
		u)
			unbak=true
			;;
		f)
			force="-f"
			;;
		c)
			cmd="cp -r"
			;;
		h)
			print_usage
			exit 0
			;;
		E)
			ext=.$OPTARG
			;;
		e)
			ext=.$OPTARG
			read -p "Are you sure you wish to use the extension '$ext'? [y/n]: " confirm
			if !(echo "$confirm" | grep -q "[Yy].*") ; then
				exit 1
			fi
			;;
		:)
			echo "-$OPTARG requires an argument."
			echo
			print_usage
			exit 1
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			print_usage
			exit 1
			;;
	esac

done

shift `expr $OPTIND - 1`

if [ $# = 0 ] ; then
	print_usage
	exit 0
fi

for item in $@
do
	noSlash=${item%$slash}
	if [ $unbak = true ] ; then
		if echo $noSlash | grep -q ".*$ext$" ; then
			$cmd $force $noSlash ${noSlash%$ext}
		else
			unable_to_unbak $noSlash
		fi
	else
		$cmd $force $noSlash ${noSlash}$ext
	fi
done
